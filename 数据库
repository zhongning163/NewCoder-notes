封锁可以避免数据的不一致性，但有可能引起 若干事务彼此等待对方释放封锁

在数据系统中，对存取权限的定义称为 授权

数据库中，数据的逻辑独立性是指 应用程序与数据库中数据的逻辑结构相互独立

同一个关系模型的任两个元组值 不能全同。 一个关系都对应于一个二维表，表的每一行对应一个元组，一个二维表中，要求不同行之间元素不能完全相同。

子模式 DDL 用来描述 数据库的局部逻辑结构

外模式也称子模式（Subschema）或用户模式，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，
是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。 
理解： ① 一个数据库可以有多个外模式； ② 外模式就是用户视图； ③ 外模式是保证数据安全性的一个有力措施。

数据库设计通常分为6个阶段
1需求分析：分析用户的需求，包括数据、功能和性能需求；
2概念结构设计：主要采用E-R模型进行设计，包括画E-R图；
3逻辑结构设计：通过将E-R图转换成表，实现从E-R模型到关系模型的转换；
4数据库物理设计：主要是为所设计的数据库选择合适的存储结构和存取路径；
5数据库的实施：包括编程、测试和试运行；
6数据库运行与维护：系统的运行与数据库的日常维护。
主要讨论其中的第3个阶段,即逻辑设计。通过一个实际的案例说明在逻辑设计中E-R图向关系模式的转换。

两阶段封锁协议的定义：能真正保证调度可串行化的封锁协议是两阶段封锁协议，该协议要求每个事务分两个阶段提出加锁和解锁申请：
增长阶段：事务可以获得锁，但不能释放锁  -　缩减阶段：事务可以释放锁，但不能获得新锁
对于一个事务而言，刚开始事务处于增长阶段，它可以根据需要获得锁；一旦该事务开始释放锁，它就进入了缩减阶段，就不能再发出加锁请求。
值得注意的是：事务的第一个解锁语句unlock被执行的时刻就是该事物缩减阶段的开始。

在SQL语言中的视图VIEW是数据库的 外模式

用矩形表示实体型；用椭圆表示实体的属性；用菱形表示实体型之间的联系

事务的原子性是指事务中包括的所有操作要么都做，要么都不做

数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。 
原子性（Atomic）（Atomicity) 事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。 
一致性（Consistent）(Consistency) 事务在完成时，必须使所有的数据都保持一致状态。 
隔离性（Insulation）(Isolation) 由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。 
持久性（Duration）(Durability） 事务完成之后，它对于系统的影响是永久性的。

“查询”设计视图窗口分上下部分；
上部分为：“字段列表区”，用来显示所选择的所有字段。
下部分为：设计网络，由一些字段列和一些已命名的列组成。

